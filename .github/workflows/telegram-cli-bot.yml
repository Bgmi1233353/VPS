name: Run Script with SSH Access

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  run-and-ssh:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest
      options: --cpus 4

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y python3-pip jq
        apt-get install -y openssh-server
        service ssh start
        curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
        apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 0E61D3BBAAEE37FE
        echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | tee /etc/apt/sources.list.d/ngrok.list
        apt-get update && apt-get install ngrok

    - name: Create and configure runner user
      env:
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      run: |
        useradd -m -s /bin/bash runner
        echo "runner:${SSH_PASSWORD}" | chpasswd
        mkdir -p /home/runner/.ssh
        chown -R runner:runner /home/runner/.ssh

    - name: Start ngrok in background
      env:
        NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
      run: |
        ngrok config add-authtoken ${NGROK_TOKEN}
        nohup ngrok tcp 22 --log=stdout > ngrok.log &

    - name: Print ngrok URL
      run: |
        sleep 10  # Give ngrok some time to start
        ngrok_url=$(curl -s localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' | sed 's/tcp:\/\///')
        echo "ngrok URL: ${ngrok_url}"
        host=$(echo ${ngrok_url} | cut -d':' -f1)
        port=$(echo ${ngrok_url} | cut -d':' -f2)
        echo "Use this command to SSH: ssh -p ${port} runner@${host}"

    - name: Install telebot
      run: |
        pip install telebot --break-system-packages

    - name: Make scripts executable
      run: |
        chmod +x *

    - name: Run infinite loop wrapper for m.py
      run: |
        chmod +x run_m_py.sh
        ./run_m_py.sh
